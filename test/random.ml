(*
 *           Copyright r6eve 2019 -
 *  Distributed under the Boost Software License, Version 1.0.
 *     (See accompanying file LICENSE_1_0.txt or copy at
 *           https://www.boost.org/LICENSE_1_0.txt)
 *)

open OUnit2

module Random = Orandom.Random

let random_seed = 0xA12EA88

let epsilon = 1e-16

(** Test suite is generated by the following Java codes. *)

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
for (int i = 0; i < 10; ++i) { System.err.println(rnd.nextBoolean()); }
```
*)
let next_boolean _test_ctxt =
  let expected = [false; true; true; true; false; true; true; true; true; false] in
  Random.set_seed random_seed;
  let is_equal e = assert_equal e @@ Random.next_boolean () in
  List.iter is_equal expected

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
final byte[] bs = new byte[10];
rnd.nextBytes(bs);
for (int i = 0; i < bs.length; ++i) { System.err.println(bs[i]); }
```
*)
let next_bytes _test_ctxt =
  let expected = [|-35; 104; -77; 41; -62; -74; -20; -96; -66; -1|] in
  Random.set_seed random_seed;
  let ba = Random.next_bytes @@ Array.make 10 0 in
  assert_equal expected ba

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
for (int i = 0; i < 10; ++i) { System.err.println(rnd.nextInt()); }
```
*)
let next_int _test_ctxt =
  let expected =
    [ 699623645
    ; -1595099454
    ; -1287389250
    ; -1685747256
    ; 1682232222
    ; -913754311
    ; -574631589
    ; -119104651
    ; -1773027241
    ; 1347232330
    ]
  in
  Random.set_seed random_seed;
  let is_equal e = assert_equal e @@ Random.next_int Unit in
  List.iter is_equal expected

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
for (int i = 0; i < 10; ++i) { System.err.println(rnd.nextInt(10)); }
```
*)
let next_int_bound _test_ctxt =
  let expected = [2; 1; 3; 0; 1; 2; 3; 2; 7; 5] in
  Random.set_seed random_seed;
  let is_equal e = assert_equal e @@ Random.next_int (Bound 10) in
  List.iter is_equal expected

let next_int_negative_bound _test_ctxt =
  try
    ignore @@ Random.next_int (Bound (-1));
    assert_failure "next_int_negative_bound"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "next_int_negative_bound"

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
for (int i = 0; i < 10; ++i) { System.err.println(rnd.nextDouble()); }
```
*)
let next_float _test_ctxt =
  let expected =
    [ 0.16289382619577597
    ; 0.7002563269064781
    ; 0.391675215769559
    ; 0.8662081654707906
    ; 0.5871849255811716
    ; 0.795985400090248
    ; 0.8753358845961806
    ; 0.5779306167183001
    ; 0.25412226823745343
    ; 0.6590125741968693
    ]
  in
  Random.set_seed random_seed;
  let cmp a b = cmp_float ~epsilon a b in
  let is_equal e = assert_equal ~cmp e @@ Random.next_float () in
  List.iter is_equal expected

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
for (int i = 0; i < 10; ++i) { System.err.println(rnd.nextGaussian()); }
```
*)
let next_gaussian _test_ctxt =
  let expected =
    [ -0.8477761452662856
    ; 0.5036174062731802
    ; -0.29448804340345225
    ; 0.9955609595163628
    ; 0.39261781282371044
    ; 1.3329040500584017
    ; 1.0093628600758726
    ; 0.20957300755532526
    ; -1.2284538576703976
    ; 0.7944583219878215
    ]
  in
  Random.set_seed random_seed;
  let cmp a b = cmp_float ~epsilon a b in
  let is_equal e = assert_equal ~cmp e @@ Random.next_gaussian () in
  List.iter is_equal expected

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.ints().limit(10).forEach(e -> System.err.println(e));
```
*)
let ints _test_ctxt =
  let expected =
    [ 699623645
    ; -1595099454
    ; -1287389250
    ; -1685747256
    ; 1682232222
    ; -913754311
    ; -574631589
    ; -119104651
    ; -1773027241
    ; 1347232330
    ]
  in
  Random.set_seed random_seed;
  let s = Random.ints Unit in
  let is_equal e = assert_equal e @@ Stream.next s in
  List.iter is_equal expected

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.ints(10L).forEach(e -> System.err.println(e));
```
*)
let ints_stream_size _test_ctxt =
  let expected =
    [ 699623645
    ; -1595099454
    ; -1287389250
    ; -1685747256
    ; 1682232222
    ; -913754311
    ; -574631589
    ; -119104651
    ; -1773027241
    ; 1347232330
    ]
  in
  Random.set_seed random_seed;
  let s = Random.ints (StreamSize { size = 10 }) in
  let is_equal e = assert_equal e @@ Stream.next s in
  List.iter is_equal expected

let ints_negative_stream_size _test_ctxt =
  try
    ignore @@ Random.ints (StreamSize { size = -1 });
    assert_failure "ints_negative_stream_size"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "ints_negative_stream_size"

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.ints(1, 5).limit(10).forEach(e -> System.err.println(e));
```
*)
let ints_range _test_ctxt =
  let expected = [1; 3; 3; 3; 2; 4; 4; 4; 3; 2] in
  Random.set_seed random_seed;
  let s = Random.ints (Range { origin = 1; bound = 5 }) in
  let is_equal e = assert_equal e @@ Stream.next s in
  List.iter is_equal expected

let ints_invalid_range _test_ctxt =
  try
    ignore @@ Random.ints (Range { origin = 1; bound = 1 });
    assert_failure "ints_invalid_range"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "ints_invalid_range"

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.ints(10L, 1, 5).forEach(e -> System.err.println(e));
```
*)
let ints_stream_size_and_range _test_ctxt =
  let expected = [1; 3; 3; 3; 2; 4; 4; 4; 3; 2] in
  Random.set_seed random_seed;
  let s = Random.ints (SandR { size = 10; origin = 1; bound = 5 }) in
  let is_equal e = assert_equal e @@ Stream.next s in
  List.iter is_equal expected

let ints_negative_stream_size_and_range _test_ctxt =
  try
    ignore @@ Random.ints (SandR { size = -1; origin = 1; bound = 5 });
    assert_failure "ints_negative_stream_size_and_range"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "ints_negative_stream_size_and_range"

let ints_stream_size_and_invalid_range _test_ctxt =
  try
    ignore @@ Random.ints (SandR { size = 10; origin = 1; bound = 1 });
    assert_failure "ints_stream_size_and_invalid_range"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "ints_stream_size_and_invalid_range"

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.doubles().limit(10).forEach(e -> System.err.println(e));
```
*)
let floats _test_ctxt =
  let expected =
    [ 0.16289382619577597
    ; 0.7002563269064781
    ; 0.391675215769559
    ; 0.8662081654707906
    ; 0.5871849255811716
    ; 0.795985400090248
    ; 0.8753358845961806
    ; 0.5779306167183001
    ; 0.25412226823745343
    ; 0.6590125741968693
    ]
  in
  Random.set_seed random_seed;
  let s = Random.floats Unit in
  let cmp a b = cmp_float ~epsilon a b in
  let is_equal e = assert_equal ~cmp e @@ Stream.next s in
  List.iter is_equal expected

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.doubles(10L).forEach(e -> System.err.println(e));
```
*)
let floats_stream_size _test_ctxt =
  let expected =
    [ 0.16289382619577597
    ; 0.7002563269064781
    ; 0.391675215769559
    ; 0.8662081654707906
    ; 0.5871849255811716
    ; 0.795985400090248
    ; 0.8753358845961806
    ; 0.5779306167183001
    ; 0.25412226823745343
    ; 0.6590125741968693
    ]
  in
  Random.set_seed random_seed;
  let s = Random.floats (StreamSize { size = 10 }) in
  let cmp a b = cmp_float ~epsilon a b in
  let is_equal e = assert_equal ~cmp e @@ Stream.next s in
  List.iter is_equal expected

let floats_negative_stream_size _test_ctxt =
  try
    ignore @@ Random.floats (StreamSize { size = -1 });
    assert_failure "floats_negative_stream_size"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "floats_negative_stream_size"

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.doubles(1.0, 5.0).limit(10).forEach(e -> System.err.println(e));
```
*)
let floats_range _test_ctxt =
  let expected =
    [ 1.6515753047831039
    ; 3.8010253076259124
    ; 2.566700863078236
    ; 4.464832661883163
    ; 3.3487397023246865
    ; 4.183941600360992
    ; 4.501343538384722
    ; 3.3117224668732006
    ; 2.0164890729498137
    ; 3.6360502967874773
    ]
  in
  Random.set_seed random_seed;
  let s = Random.floats (Range { origin = 1.; bound = 5. }) in
  let cmp a b = cmp_float ~epsilon a b in
  let is_equal e = assert_equal ~cmp e @@ Stream.next s in
  List.iter is_equal expected

let floats_invalid_range _test_ctxt =
  try
    ignore @@ Random.floats (Range { origin = 1.; bound = 1. });
    assert_failure "floats_invalid_range"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "floats_invalid_range"

(**
```java
final Random rnd = new Random();
rnd.setSeed(random_seed);
rnd.doubles(10L, 1.0, 5.0).forEach(e -> System.err.println(e));
```
*)
let floats_stream_size_and_range _test_ctxt =
  let expected =
    [ 1.6515753047831039
    ; 3.8010253076259124
    ; 2.566700863078236
    ; 4.464832661883163
    ; 3.3487397023246865
    ; 4.183941600360992
    ; 4.501343538384722
    ; 3.3117224668732006
    ; 2.0164890729498137
    ; 3.6360502967874773
    ]
  in
  Random.set_seed random_seed;
  let s = Random.floats (SandR { size = 10; origin = 1.; bound = 5. }) in
  let cmp a b = cmp_float ~epsilon a b in
  let is_equal e = assert_equal ~cmp e @@ Stream.next s in
  List.iter is_equal expected

let floats_negative_stream_size_and_range _test_ctxt =
  try
    ignore @@ Random.floats (SandR { size = -1; origin = 1.; bound = 5. });
    assert_failure "floats_negative_stream_size_and_range"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "floats_negative_stream_size_and_range"

let floats_stream_size_and_invalid_range _test_ctxt =
  try
    ignore @@ Random.floats (SandR { size = 10; origin = 1.; bound = 1. });
    assert_failure "floats_stream_size_and_invalid_range"
  with
  | Invalid_argument _ -> ()
  | _ -> assert_failure "floats_stream_size_and_invalid_range"

let suite =
  "Orandom suite" >:::
    [ "next_boolean" >:: next_boolean
    ; "next_bytes" >:: next_bytes
    ; "next_int" >:: next_int
    ; "next_int_bount" >:: next_int_bound
    ; "next_int_negative_bound" >:: next_int_negative_bound
    ; "next_float" >:: next_float
    ; "next_gaussian" >:: next_gaussian
    ; "ints" >:: ints
    ; "ints_stream_size" >:: ints_stream_size
    ; "ints_negative_stream_size" >:: ints_negative_stream_size
    ; "ints_range" >:: ints_range
    ; "ints_invalid_range" >:: ints_invalid_range
    ; "ints_stream_size_and_range" >:: ints_stream_size_and_range
    ; "ints_negative_stream_size_and_range" >:: ints_negative_stream_size_and_range
    ; "ints_stream_size_and_invalid_range" >:: ints_stream_size_and_invalid_range
    ; "floats" >:: floats
    ; "floats_stream_size" >:: floats_stream_size
    ; "floats_negative_stream_size" >:: floats_negative_stream_size
    ; "floats_range" >:: floats_range
    ; "floats_invalid_range" >:: floats_invalid_range
    ; "floats_stream_size_and_range" >:: floats_stream_size_and_range
    ; "floats_negative_stream_size_and_range" >:: floats_negative_stream_size_and_range
    ; "floats_stream_size_and_invalid_range" >:: floats_stream_size_and_invalid_range
    ]

let () =
  run_test_tt_main suite
